@model Sneaker.Models.KhachHang
<br />
<br />

<h2 style="text-align:center;font-weight:bold">Chỉnh sửa thông tin người dùng</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <br />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.MaKH)

        <div class="form-group">
            <label class="control-label col-md-2" for="HoTen">Họ Tên</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.HoTen, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HoTen, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="TaiKhoan">Tài Khoản</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.TaiKhoan, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TaiKhoan, "", new { @class = "text-danger" })
                @if (!String.IsNullOrEmpty(ViewData["existingUsernameError"] as string))
                {
                    <div class="text-danger">
                        @ViewData["existingUsernameError"]
                    </div>
                }
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="MatKhau">Mật Khẩu</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.MatKhau, new { htmlAttributes = new { @class = "form-control", type = "password" } })
                @Html.ValidationMessageFor(model => model.MatKhau, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="Email">Email</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                @if (!String.IsNullOrEmpty(ViewData["existingEmailError"] as string))
                {
                    <div class="text-danger">
                        @ViewData["existingEmailError"]
                    </div>
                }
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="DiaChiKH">Địa Chỉ</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.DiaChiKH, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DiaChiKH, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="DienThoaiKH">Điện Thoại</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.DienThoaiKH, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DienThoaiKH, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input class="btn btn-primary" style="font-size:20px;" type="submit" value="Lưu" class="btn btn-primary" />
            </div>
            <br />
            <div class="col-md-offset-6 col-md-12">
                <button class="btn btn-primary" style="font-size:20px;" onclick="location.href='@Url.Action("ChiTietKH", "Member", new { id = Model.MaKH })'"><i class="fa fa-info-circle"></i> Quay lại</button>
            </div>
        </div>
    </div>
}
